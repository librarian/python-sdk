"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import nebius.logging.v1.agentmanager.version_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class VersionServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetVersion: grpc.UnaryUnaryMultiCallable[
        nebius.logging.v1.agentmanager.version_service_pb2.GetVersionRequest,
        nebius.logging.v1.agentmanager.version_service_pb2.GetVersionResponse,
    ]

class VersionServiceAsyncStub:
    GetVersion: grpc.aio.UnaryUnaryMultiCallable[
        nebius.logging.v1.agentmanager.version_service_pb2.GetVersionRequest,
        nebius.logging.v1.agentmanager.version_service_pb2.GetVersionResponse,
    ]

class VersionServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetVersion(
        self,
        request: nebius.logging.v1.agentmanager.version_service_pb2.GetVersionRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.logging.v1.agentmanager.version_service_pb2.GetVersionResponse, collections.abc.Awaitable[nebius.logging.v1.agentmanager.version_service_pb2.GetVersionResponse]]: ...

def add_VersionServiceServicer_to_server(servicer: VersionServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
