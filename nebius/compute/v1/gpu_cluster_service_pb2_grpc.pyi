"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import nebius.common.v1.metadata_pb2
import nebius.common.v1.operation_pb2
import nebius.common.v1.operation_service_pb2
import nebius.compute.v1.gpu_cluster_pb2
import nebius.compute.v1.gpu_cluster_service_pb2
import nebius.compute.v1.operation_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class GpuClusterServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.GetGpuClusterRequest,
        nebius.compute.v1.gpu_cluster_pb2.GpuCluster,
    ]

    GetByName: grpc.UnaryUnaryMultiCallable[
        nebius.common.v1.metadata_pb2.GetByNameRequest,
        nebius.compute.v1.gpu_cluster_pb2.GpuCluster,
    ]

    List: grpc.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.ListGpuClustersRequest,
        nebius.compute.v1.gpu_cluster_service_pb2.ListGpuClustersResponse,
    ]

    Create: grpc.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.CreateGpuClusterRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Update: grpc.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.UpdateGpuClusterRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Delete: grpc.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.DeleteGpuClusterRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    ListOperationsByParent: grpc.UnaryUnaryMultiCallable[
        nebius.compute.v1.operation_service_pb2.ListOperationsByParentRequest,
        nebius.common.v1.operation_service_pb2.ListOperationsResponse,
    ]

class GpuClusterServiceAsyncStub:
    Get: grpc.aio.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.GetGpuClusterRequest,
        nebius.compute.v1.gpu_cluster_pb2.GpuCluster,
    ]

    GetByName: grpc.aio.UnaryUnaryMultiCallable[
        nebius.common.v1.metadata_pb2.GetByNameRequest,
        nebius.compute.v1.gpu_cluster_pb2.GpuCluster,
    ]

    List: grpc.aio.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.ListGpuClustersRequest,
        nebius.compute.v1.gpu_cluster_service_pb2.ListGpuClustersResponse,
    ]

    Create: grpc.aio.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.CreateGpuClusterRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Update: grpc.aio.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.UpdateGpuClusterRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        nebius.compute.v1.gpu_cluster_service_pb2.DeleteGpuClusterRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    ListOperationsByParent: grpc.aio.UnaryUnaryMultiCallable[
        nebius.compute.v1.operation_service_pb2.ListOperationsByParentRequest,
        nebius.common.v1.operation_service_pb2.ListOperationsResponse,
    ]

class GpuClusterServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Get(
        self,
        request: nebius.compute.v1.gpu_cluster_service_pb2.GetGpuClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.compute.v1.gpu_cluster_pb2.GpuCluster, collections.abc.Awaitable[nebius.compute.v1.gpu_cluster_pb2.GpuCluster]]: ...

    @abc.abstractmethod
    def GetByName(
        self,
        request: nebius.common.v1.metadata_pb2.GetByNameRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.compute.v1.gpu_cluster_pb2.GpuCluster, collections.abc.Awaitable[nebius.compute.v1.gpu_cluster_pb2.GpuCluster]]: ...

    @abc.abstractmethod
    def List(
        self,
        request: nebius.compute.v1.gpu_cluster_service_pb2.ListGpuClustersRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.compute.v1.gpu_cluster_service_pb2.ListGpuClustersResponse, collections.abc.Awaitable[nebius.compute.v1.gpu_cluster_service_pb2.ListGpuClustersResponse]]: ...

    @abc.abstractmethod
    def Create(
        self,
        request: nebius.compute.v1.gpu_cluster_service_pb2.CreateGpuClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Update(
        self,
        request: nebius.compute.v1.gpu_cluster_service_pb2.UpdateGpuClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Delete(
        self,
        request: nebius.compute.v1.gpu_cluster_service_pb2.DeleteGpuClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def ListOperationsByParent(
        self,
        request: nebius.compute.v1.operation_service_pb2.ListOperationsByParentRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_service_pb2.ListOperationsResponse, collections.abc.Awaitable[nebius.common.v1.operation_service_pb2.ListOperationsResponse]]: ...

def add_GpuClusterServiceServicer_to_server(servicer: GpuClusterServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
