# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: nebius/compute/v1/disk_service.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from nebius.common.v1 import metadata_pb2 as nebius_dot_common_dot_v1_dot_metadata__pb2
from nebius.common.v1 import operation_pb2 as nebius_dot_common_dot_v1_dot_operation__pb2
from nebius.common.v1 import operation_service_pb2 as nebius_dot_common_dot_v1_dot_operation__service__pb2
from nebius.compute.v1 import disk_pb2 as nebius_dot_compute_dot_v1_dot_disk__pb2
from nebius.compute.v1 import operation_service_pb2 as nebius_dot_compute_dot_v1_dot_operation__service__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n$nebius/compute/v1/disk_service.proto\x12\x11nebius.compute.v1\x1a\x1fnebius/common/v1/metadata.proto\x1a nebius/common/v1/operation.proto\x1a(nebius/common/v1/operation_service.proto\x1a\x1cnebius/compute/v1/disk.proto\x1a)nebius/compute/v1/operation_service.proto\"\x1c\n\x0eGetDiskRequest\x12\n\n\x02id\x18\x01 \x01(\t\"\\\n\x10ListDisksRequest\x12\x11\n\tparent_id\x18\x01 \x01(\t\x12\x11\n\tpage_size\x18\x02 \x01(\x03\x12\x12\n\npage_token\x18\x03 \x01(\t\x12\x0e\n\x06\x66ilter\x18\x04 \x01(\t\"t\n\x11\x43reateDiskRequest\x12\x34\n\x08metadata\x18\x01 \x01(\x0b\x32\".nebius.common.v1.ResourceMetadata\x12)\n\x04spec\x18\x02 \x01(\x0b\x32\x1b.nebius.compute.v1.DiskSpec\"t\n\x11UpdateDiskRequest\x12\x34\n\x08metadata\x18\x01 \x01(\x0b\x32\".nebius.common.v1.ResourceMetadata\x12)\n\x04spec\x18\x02 \x01(\x0b\x32\x1b.nebius.compute.v1.DiskSpec\"\x1f\n\x11\x44\x65leteDiskRequest\x12\n\n\x02id\x18\x01 \x01(\t\"T\n\x11ListDisksResponse\x12&\n\x05items\x18\x01 \x03(\x0b\x32\x17.nebius.compute.v1.Disk\x12\x17\n\x0fnext_page_token\x18\x02 \x01(\t2\xca\x04\n\x0b\x44iskService\x12\x41\n\x03Get\x12!.nebius.compute.v1.GetDiskRequest\x1a\x17.nebius.compute.v1.Disk\x12H\n\tGetByName\x12\".nebius.common.v1.GetByNameRequest\x1a\x17.nebius.compute.v1.Disk\x12Q\n\x04List\x12#.nebius.compute.v1.ListDisksRequest\x1a$.nebius.compute.v1.ListDisksResponse\x12K\n\x06\x43reate\x12$.nebius.compute.v1.CreateDiskRequest\x1a\x1b.nebius.common.v1.Operation\x12K\n\x06Update\x12$.nebius.compute.v1.UpdateDiskRequest\x1a\x1b.nebius.common.v1.Operation\x12K\n\x06\x44\x65lete\x12$.nebius.compute.v1.DeleteDiskRequest\x1a\x1b.nebius.common.v1.Operation\x12t\n\x16ListOperationsByParent\x12\x30.nebius.compute.v1.ListOperationsByParentRequest\x1a(.nebius.common.v1.ListOperationsResponseB_\n\x18\x61i.nebius.pub.compute.v1B\x10\x44iskServiceProtoP\x01Z/github.com/nebius/gosdk/proto/nebius/compute/v1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'nebius.compute.v1.disk_service_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\030ai.nebius.pub.compute.v1B\020DiskServiceProtoP\001Z/github.com/nebius/gosdk/proto/nebius/compute/v1'
  _globals['_GETDISKREQUEST']._serialized_start=241
  _globals['_GETDISKREQUEST']._serialized_end=269
  _globals['_LISTDISKSREQUEST']._serialized_start=271
  _globals['_LISTDISKSREQUEST']._serialized_end=363
  _globals['_CREATEDISKREQUEST']._serialized_start=365
  _globals['_CREATEDISKREQUEST']._serialized_end=481
  _globals['_UPDATEDISKREQUEST']._serialized_start=483
  _globals['_UPDATEDISKREQUEST']._serialized_end=599
  _globals['_DELETEDISKREQUEST']._serialized_start=601
  _globals['_DELETEDISKREQUEST']._serialized_end=632
  _globals['_LISTDISKSRESPONSE']._serialized_start=634
  _globals['_LISTDISKSRESPONSE']._serialized_end=718
  _globals['_DISKSERVICE']._serialized_start=721
  _globals['_DISKSERVICE']._serialized_end=1307
# @@protoc_insertion_point(module_scope)
