"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import nebius.common.v1.metadata_pb2
import nebius.vpc.v1.pool_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Subnet(google.protobuf.message.Message):
    """Defines a Subnet, a segment of a network used for more granular control and management.
    Subnet uses pools to organize address space.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METADATA_FIELD_NUMBER: builtins.int
    SPEC_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> nebius.common.v1.metadata_pb2.ResourceMetadata:
        """Metadata for the subnet resource.
        `metadata.parent_id` represents IAM container
        """

    @property
    def spec(self) -> global___SubnetSpec:
        """Specification of the subnet."""

    @property
    def status(self) -> global___SubnetStatus:
        """Status of the subnet."""

    def __init__(
        self,
        *,
        metadata: nebius.common.v1.metadata_pb2.ResourceMetadata | None = ...,
        spec: global___SubnetSpec | None = ...,
        status: global___SubnetStatus | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec", "status", b"status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec", "status", b"status"]) -> None: ...

global___Subnet = Subnet

@typing.final
class SubnetSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NETWORK_ID_FIELD_NUMBER: builtins.int
    IPV4_PRIVATE_POOLS_FIELD_NUMBER: builtins.int
    IPV4_PUBLIC_POOLS_FIELD_NUMBER: builtins.int
    network_id: builtins.str
    """Network ID."""
    @property
    def ipv4_private_pools(self) -> global___IPv4PrivateSubnetPools:
        """Pools for private ipv4 addresses.
        Default is 'use_network_pools = true'
        """

    @property
    def ipv4_public_pools(self) -> global___IPv4PublicSubnetPools:
        """Pools for public ipv4 addresses.
        Default is 'use_network_pools = true'
        """

    def __init__(
        self,
        *,
        network_id: builtins.str = ...,
        ipv4_private_pools: global___IPv4PrivateSubnetPools | None = ...,
        ipv4_public_pools: global___IPv4PublicSubnetPools | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ipv4_private_pools", b"ipv4_private_pools", "ipv4_public_pools", b"ipv4_public_pools"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ipv4_private_pools", b"ipv4_private_pools", "ipv4_public_pools", b"ipv4_public_pools", "network_id", b"network_id"]) -> None: ...

global___SubnetSpec = SubnetSpec

@typing.final
class IPv4PrivateSubnetPools(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    POOLS_FIELD_NUMBER: builtins.int
    USE_NETWORK_POOLS_FIELD_NUMBER: builtins.int
    use_network_pools: builtins.bool
    """Allow using of private ipv4 pools which are specified in network
    Must be false if 'pools' is not empty
    """
    @property
    def pools(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SubnetPool]:
        """Pools for private ipv4 allocations in subnet
        Must be empty if 'use_network_pools = true'
        """

    def __init__(
        self,
        *,
        pools: collections.abc.Iterable[global___SubnetPool] | None = ...,
        use_network_pools: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["pools", b"pools", "use_network_pools", b"use_network_pools"]) -> None: ...

global___IPv4PrivateSubnetPools = IPv4PrivateSubnetPools

@typing.final
class IPv4PublicSubnetPools(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    POOLS_FIELD_NUMBER: builtins.int
    USE_NETWORK_POOLS_FIELD_NUMBER: builtins.int
    use_network_pools: builtins.bool
    """Allow using of public ipv4 pools which are specified in network
    Must be false if 'pools' is not empty
    """
    @property
    def pools(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SubnetPool]:
        """Pools for public ipv4 allocations in subnet
        Must be empty if 'use_network_pools = true'
        """

    def __init__(
        self,
        *,
        pools: collections.abc.Iterable[global___SubnetPool] | None = ...,
        use_network_pools: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["pools", b"pools", "use_network_pools", b"use_network_pools"]) -> None: ...

global___IPv4PublicSubnetPools = IPv4PublicSubnetPools

@typing.final
class SubnetPool(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CIDRS_FIELD_NUMBER: builtins.int
    @property
    def cidrs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SubnetCidr]: ...
    def __init__(
        self,
        *,
        cidrs: collections.abc.Iterable[global___SubnetCidr] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["cidrs", b"cidrs"]) -> None: ...

global___SubnetPool = SubnetPool

@typing.final
class SubnetCidr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CIDR_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    MAX_MASK_LENGTH_FIELD_NUMBER: builtins.int
    cidr: builtins.str
    """CIDR block.
    May be a prefix length (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
    """
    state: nebius.vpc.v1.pool_pb2.AddressBlockState.ValueType
    """State of the Cidr.
    Default state is AVAILABLE
    """
    max_mask_length: builtins.int
    """Maximum mask length for allocation from this cidr
    Default max_mask_length is 32 for IPv4 and 128 for IPv6
    """
    def __init__(
        self,
        *,
        cidr: builtins.str = ...,
        state: nebius.vpc.v1.pool_pb2.AddressBlockState.ValueType = ...,
        max_mask_length: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["cidr", b"cidr", "max_mask_length", b"max_mask_length", "state", b"state"]) -> None: ...

global___SubnetCidr = SubnetCidr

@typing.final
class SubnetStatus(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _State:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[SubnetStatus._State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        STATE_UNSPECIFIED: SubnetStatus._State.ValueType  # 0
        """Default state, unspecified."""
        CREATING: SubnetStatus._State.ValueType  # 1
        """Subnet is being created."""
        READY: SubnetStatus._State.ValueType  # 2
        """Subnet is ready for use."""
        DELETING: SubnetStatus._State.ValueType  # 3
        """Subnet is being deleted."""

    class State(_State, metaclass=_StateEnumTypeWrapper):
        """Enumeration of possible states of the subnet."""

    STATE_UNSPECIFIED: SubnetStatus.State.ValueType  # 0
    """Default state, unspecified."""
    CREATING: SubnetStatus.State.ValueType  # 1
    """Subnet is being created."""
    READY: SubnetStatus.State.ValueType  # 2
    """Subnet is ready for use."""
    DELETING: SubnetStatus.State.ValueType  # 3
    """Subnet is being deleted."""

    STATE_FIELD_NUMBER: builtins.int
    IPV4_PRIVATE_CIDRS_FIELD_NUMBER: builtins.int
    IPV4_PUBLIC_CIDRS_FIELD_NUMBER: builtins.int
    state: global___SubnetStatus.State.ValueType
    """Current state of the subnet."""
    @property
    def ipv4_private_cidrs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """CIDR blocks."""

    @property
    def ipv4_public_cidrs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """CIDR blocks."""

    def __init__(
        self,
        *,
        state: global___SubnetStatus.State.ValueType = ...,
        ipv4_private_cidrs: collections.abc.Iterable[builtins.str] | None = ...,
        ipv4_public_cidrs: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ipv4_private_cidrs", b"ipv4_private_cidrs", "ipv4_public_cidrs", b"ipv4_public_cidrs", "state", b"state"]) -> None: ...

global___SubnetStatus = SubnetStatus
