"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import nebius.common.v1.metadata_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class TenantUserAccount(google.protobuf.message.Message):
    """this proto describes projections of global user accounts to specific tenants
    every global user account gets a specific id like 'tenantuseraccount-someuniquesuffix'
    inside those tenants where access to their resources is granted to them

    global user accounts are described separately in user_account*.proto
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METADATA_FIELD_NUMBER: builtins.int
    SPEC_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> nebius.common.v1.metadata_pb2.ResourceMetadata: ...
    @property
    def spec(self) -> global___TenantUserAccountSpec: ...
    @property
    def status(self) -> global___TenantUserAccountStatus: ...
    def __init__(
        self,
        *,
        metadata: nebius.common.v1.metadata_pb2.ResourceMetadata | None = ...,
        spec: global___TenantUserAccountSpec | None = ...,
        status: global___TenantUserAccountStatus | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec", "status", b"status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec", "status", b"status"]) -> None: ...

global___TenantUserAccount = TenantUserAccount

@typing.final
class TenantUserAccountWithAttributes(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TENANT_USER_ACCOUNT_FIELD_NUMBER: builtins.int
    ATTRIBUTES_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    @property
    def tenant_user_account(self) -> global___TenantUserAccount: ...
    @property
    def attributes(self) -> global___UserAttributes: ...
    @property
    def error(self) -> global___Error:
        """in a case of issues of getting attributes from pds service, we can still return some data from cpl"""

    def __init__(
        self,
        *,
        tenant_user_account: global___TenantUserAccount | None = ...,
        attributes: global___UserAttributes | None = ...,
        error: global___Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["attributes", b"attributes", "attributesOptional", b"attributesOptional", "error", b"error", "tenant_user_account", b"tenant_user_account"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["attributes", b"attributes", "attributesOptional", b"attributesOptional", "error", b"error", "tenant_user_account", b"tenant_user_account"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["attributesOptional", b"attributesOptional"]) -> typing.Literal["attributes", "error"] | None: ...

global___TenantUserAccountWithAttributes = TenantUserAccountWithAttributes

@typing.final
class UserAttributes(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUB_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    GIVEN_NAME_FIELD_NUMBER: builtins.int
    FAMILY_NAME_FIELD_NUMBER: builtins.int
    PREFERRED_USERNAME_FIELD_NUMBER: builtins.int
    PICTURE_FIELD_NUMBER: builtins.int
    EMAIL_FIELD_NUMBER: builtins.int
    EMAIL_VERIFIED_FIELD_NUMBER: builtins.int
    ZONEINFO_FIELD_NUMBER: builtins.int
    LOCALE_FIELD_NUMBER: builtins.int
    PHONE_NUMBER_FIELD_NUMBER: builtins.int
    PHONE_NUMBER_VERIFIED_FIELD_NUMBER: builtins.int
    sub: builtins.str
    name: builtins.str
    given_name: builtins.str
    family_name: builtins.str
    preferred_username: builtins.str
    picture: builtins.str
    email: builtins.str
    email_verified: builtins.bool
    zoneinfo: builtins.str
    locale: builtins.str
    phone_number: builtins.str
    phone_number_verified: builtins.bool
    def __init__(
        self,
        *,
        sub: builtins.str | None = ...,
        name: builtins.str | None = ...,
        given_name: builtins.str | None = ...,
        family_name: builtins.str | None = ...,
        preferred_username: builtins.str | None = ...,
        picture: builtins.str | None = ...,
        email: builtins.str | None = ...,
        email_verified: builtins.bool | None = ...,
        zoneinfo: builtins.str | None = ...,
        locale: builtins.str | None = ...,
        phone_number: builtins.str | None = ...,
        phone_number_verified: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_email", b"_email", "_email_verified", b"_email_verified", "_family_name", b"_family_name", "_given_name", b"_given_name", "_locale", b"_locale", "_name", b"_name", "_phone_number", b"_phone_number", "_phone_number_verified", b"_phone_number_verified", "_picture", b"_picture", "_preferred_username", b"_preferred_username", "_sub", b"_sub", "_zoneinfo", b"_zoneinfo", "email", b"email", "email_verified", b"email_verified", "family_name", b"family_name", "given_name", b"given_name", "locale", b"locale", "name", b"name", "phone_number", b"phone_number", "phone_number_verified", b"phone_number_verified", "picture", b"picture", "preferred_username", b"preferred_username", "sub", b"sub", "zoneinfo", b"zoneinfo"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_email", b"_email", "_email_verified", b"_email_verified", "_family_name", b"_family_name", "_given_name", b"_given_name", "_locale", b"_locale", "_name", b"_name", "_phone_number", b"_phone_number", "_phone_number_verified", b"_phone_number_verified", "_picture", b"_picture", "_preferred_username", b"_preferred_username", "_sub", b"_sub", "_zoneinfo", b"_zoneinfo", "email", b"email", "email_verified", b"email_verified", "family_name", b"family_name", "given_name", b"given_name", "locale", b"locale", "name", b"name", "phone_number", b"phone_number", "phone_number_verified", b"phone_number_verified", "picture", b"picture", "preferred_username", b"preferred_username", "sub", b"sub", "zoneinfo", b"zoneinfo"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_email", b"_email"]) -> typing.Literal["email"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_email_verified", b"_email_verified"]) -> typing.Literal["email_verified"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_family_name", b"_family_name"]) -> typing.Literal["family_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_given_name", b"_given_name"]) -> typing.Literal["given_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_locale", b"_locale"]) -> typing.Literal["locale"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_name", b"_name"]) -> typing.Literal["name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_phone_number", b"_phone_number"]) -> typing.Literal["phone_number"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_phone_number_verified", b"_phone_number_verified"]) -> typing.Literal["phone_number_verified"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_picture", b"_picture"]) -> typing.Literal["picture"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_preferred_username", b"_preferred_username"]) -> typing.Literal["preferred_username"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_sub", b"_sub"]) -> typing.Literal["sub"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_zoneinfo", b"_zoneinfo"]) -> typing.Literal["zoneinfo"] | None: ...

global___UserAttributes = UserAttributes

@typing.final
class Error(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MESSAGE_FIELD_NUMBER: builtins.int
    message: builtins.str
    def __init__(
        self,
        *,
        message: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["message", b"message"]) -> None: ...

global___Error = Error

@typing.final
class TenantUserAccountSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class VisibleAttributes(google.protobuf.message.Message):
        """when a global user account is projected to a specific tenant
        they can give consent for that tenant's owner to view specific personal data
        by listing explicitly visible PDS attributes
        complete list of PDS attributes is described in ../../pds/inner/v1alpha1/iam_identifier.proto
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ATTRIBUTE_FIELD_NUMBER: builtins.int
        @property
        def attribute(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        def __init__(
            self,
            *,
            attribute: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["attribute", b"attribute"]) -> None: ...

    VISIBLE_ATTRIBUTES_FIELD_NUMBER: builtins.int
    @property
    def visible_attributes(self) -> global___TenantUserAccountSpec.VisibleAttributes: ...
    def __init__(
        self,
        *,
        visible_attributes: global___TenantUserAccountSpec.VisibleAttributes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["visible_attributes", b"visible_attributes"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["visible_attributes", b"visible_attributes"]) -> None: ...

global___TenantUserAccountSpec = TenantUserAccountSpec

@typing.final
class TenantUserAccountStatus(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _State:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _StateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[TenantUserAccountStatus._State.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        STATE_UNSPECIFIED: TenantUserAccountStatus._State.ValueType  # 0
        ACTIVE: TenantUserAccountStatus._State.ValueType  # 1
        INACTIVE: TenantUserAccountStatus._State.ValueType  # 2
        BLOCKED: TenantUserAccountStatus._State.ValueType  # 3

    class State(_State, metaclass=_StateEnumTypeWrapper): ...
    STATE_UNSPECIFIED: TenantUserAccountStatus.State.ValueType  # 0
    ACTIVE: TenantUserAccountStatus.State.ValueType  # 1
    INACTIVE: TenantUserAccountStatus.State.ValueType  # 2
    BLOCKED: TenantUserAccountStatus.State.ValueType  # 3

    STATE_FIELD_NUMBER: builtins.int
    INVITATION_ID_FIELD_NUMBER: builtins.int
    FEDERATION_ID_FIELD_NUMBER: builtins.int
    state: global___TenantUserAccountStatus.State.ValueType
    invitation_id: builtins.str
    """if a tenant user account is created during invitation it gets a reference to the invitation resource
    once invitation is accepted it looses this reference (and internally gets a reference to their global federated user account)
    """
    federation_id: builtins.str
    """currently can only accept the values: custom, unknown, google, github."""
    def __init__(
        self,
        *,
        state: global___TenantUserAccountStatus.State.ValueType = ...,
        invitation_id: builtins.str = ...,
        federation_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["federation_id", b"federation_id", "invitation_id", b"invitation_id", "state", b"state"]) -> None: ...

global___TenantUserAccountStatus = TenantUserAccountStatus
