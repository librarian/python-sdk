"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import nebius.common.v1.operation_pb2
import nebius.iam.v1.access_key_pb2
import nebius.iam.v1.access_key_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AccessKeyServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.CreateAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    List: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.ListAccessKeysRequest,
        nebius.iam.v1.access_key_service_pb2.ListAccessKeysResponse,
    ]

    ListByAccount: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.ListAccessKeysByAccountRequest,
        nebius.iam.v1.access_key_service_pb2.ListAccessKeysResponse,
    ]

    Update: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.UpdateAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    GetById: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.GetAccessKeyByIdRequest,
        nebius.iam.v1.access_key_pb2.AccessKey,
    ]

    GetByAwsId: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.GetAccessKeyByAwsIdRequest,
        nebius.iam.v1.access_key_pb2.AccessKey,
    ]

    GetSecretOnce: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.GetAccessKeySecretOnceRequest,
        nebius.iam.v1.access_key_service_pb2.GetAccessKeySecretOnceResponse,
    ]

    Activate: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.ActivateAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Deactivate: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.DeactivateAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Delete: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.DeleteAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

class AccessKeyServiceAsyncStub:
    Create: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.CreateAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    List: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.ListAccessKeysRequest,
        nebius.iam.v1.access_key_service_pb2.ListAccessKeysResponse,
    ]

    ListByAccount: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.ListAccessKeysByAccountRequest,
        nebius.iam.v1.access_key_service_pb2.ListAccessKeysResponse,
    ]

    Update: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.UpdateAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    GetById: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.GetAccessKeyByIdRequest,
        nebius.iam.v1.access_key_pb2.AccessKey,
    ]

    GetByAwsId: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.GetAccessKeyByAwsIdRequest,
        nebius.iam.v1.access_key_pb2.AccessKey,
    ]

    GetSecretOnce: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.GetAccessKeySecretOnceRequest,
        nebius.iam.v1.access_key_service_pb2.GetAccessKeySecretOnceResponse,
    ]

    Activate: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.ActivateAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Deactivate: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.DeactivateAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.access_key_service_pb2.DeleteAccessKeyRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

class AccessKeyServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(
        self,
        request: nebius.iam.v1.access_key_service_pb2.CreateAccessKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def List(
        self,
        request: nebius.iam.v1.access_key_service_pb2.ListAccessKeysRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.access_key_service_pb2.ListAccessKeysResponse, collections.abc.Awaitable[nebius.iam.v1.access_key_service_pb2.ListAccessKeysResponse]]: ...

    @abc.abstractmethod
    def ListByAccount(
        self,
        request: nebius.iam.v1.access_key_service_pb2.ListAccessKeysByAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.access_key_service_pb2.ListAccessKeysResponse, collections.abc.Awaitable[nebius.iam.v1.access_key_service_pb2.ListAccessKeysResponse]]: ...

    @abc.abstractmethod
    def Update(
        self,
        request: nebius.iam.v1.access_key_service_pb2.UpdateAccessKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def GetById(
        self,
        request: nebius.iam.v1.access_key_service_pb2.GetAccessKeyByIdRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.access_key_pb2.AccessKey, collections.abc.Awaitable[nebius.iam.v1.access_key_pb2.AccessKey]]: ...

    @abc.abstractmethod
    def GetByAwsId(
        self,
        request: nebius.iam.v1.access_key_service_pb2.GetAccessKeyByAwsIdRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.access_key_pb2.AccessKey, collections.abc.Awaitable[nebius.iam.v1.access_key_pb2.AccessKey]]: ...

    @abc.abstractmethod
    def GetSecretOnce(
        self,
        request: nebius.iam.v1.access_key_service_pb2.GetAccessKeySecretOnceRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.access_key_service_pb2.GetAccessKeySecretOnceResponse, collections.abc.Awaitable[nebius.iam.v1.access_key_service_pb2.GetAccessKeySecretOnceResponse]]: ...

    @abc.abstractmethod
    def Activate(
        self,
        request: nebius.iam.v1.access_key_service_pb2.ActivateAccessKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Deactivate(
        self,
        request: nebius.iam.v1.access_key_service_pb2.DeactivateAccessKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Delete(
        self,
        request: nebius.iam.v1.access_key_service_pb2.DeleteAccessKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

def add_AccessKeyServiceServicer_to_server(servicer: AccessKeyServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
