"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import nebius.iam.v1.container_pb2
import nebius.iam.v1.project_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ProjectServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.project_service_pb2.GetProjectRequest,
        nebius.iam.v1.container_pb2.Container,
    ]

    GetByName: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.project_service_pb2.GetProjectByNameRequest,
        nebius.iam.v1.container_pb2.Container,
    ]

    List: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.project_service_pb2.ListProjectsRequest,
        nebius.iam.v1.project_service_pb2.ListProjectsResponse,
    ]

class ProjectServiceAsyncStub:
    Get: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.project_service_pb2.GetProjectRequest,
        nebius.iam.v1.container_pb2.Container,
    ]

    GetByName: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.project_service_pb2.GetProjectByNameRequest,
        nebius.iam.v1.container_pb2.Container,
    ]

    List: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.project_service_pb2.ListProjectsRequest,
        nebius.iam.v1.project_service_pb2.ListProjectsResponse,
    ]

class ProjectServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Get(
        self,
        request: nebius.iam.v1.project_service_pb2.GetProjectRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.container_pb2.Container, collections.abc.Awaitable[nebius.iam.v1.container_pb2.Container]]: ...

    @abc.abstractmethod
    def GetByName(
        self,
        request: nebius.iam.v1.project_service_pb2.GetProjectByNameRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.container_pb2.Container, collections.abc.Awaitable[nebius.iam.v1.container_pb2.Container]]: ...

    @abc.abstractmethod
    def List(
        self,
        request: nebius.iam.v1.project_service_pb2.ListProjectsRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.project_service_pb2.ListProjectsResponse, collections.abc.Awaitable[nebius.iam.v1.project_service_pb2.ListProjectsResponse]]: ...

def add_ProjectServiceServicer_to_server(servicer: ProjectServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
