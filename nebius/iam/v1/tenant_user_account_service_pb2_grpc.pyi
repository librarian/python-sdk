"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import nebius.common.v1.operation_pb2
import nebius.iam.v1.tenant_user_account_pb2
import nebius.iam.v1.tenant_user_account_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class TenantUserAccountServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.tenant_user_account_service_pb2.GetTenantUserAccountRequest,
        nebius.iam.v1.tenant_user_account_pb2.TenantUserAccount,
    ]

    List: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.tenant_user_account_service_pb2.ListTenantUserAccountsRequest,
        nebius.iam.v1.tenant_user_account_service_pb2.ListTenantUserAccountsResponse,
    ]

    Block: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.tenant_user_account_service_pb2.BlockTenantUserAccountRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Unblock: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.tenant_user_account_service_pb2.UnblockTenantUserAccountRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

class TenantUserAccountServiceAsyncStub:
    Get: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.tenant_user_account_service_pb2.GetTenantUserAccountRequest,
        nebius.iam.v1.tenant_user_account_pb2.TenantUserAccount,
    ]

    List: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.tenant_user_account_service_pb2.ListTenantUserAccountsRequest,
        nebius.iam.v1.tenant_user_account_service_pb2.ListTenantUserAccountsResponse,
    ]

    Block: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.tenant_user_account_service_pb2.BlockTenantUserAccountRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Unblock: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.tenant_user_account_service_pb2.UnblockTenantUserAccountRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

class TenantUserAccountServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Get(
        self,
        request: nebius.iam.v1.tenant_user_account_service_pb2.GetTenantUserAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.tenant_user_account_pb2.TenantUserAccount, collections.abc.Awaitable[nebius.iam.v1.tenant_user_account_pb2.TenantUserAccount]]: ...

    @abc.abstractmethod
    def List(
        self,
        request: nebius.iam.v1.tenant_user_account_service_pb2.ListTenantUserAccountsRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.tenant_user_account_service_pb2.ListTenantUserAccountsResponse, collections.abc.Awaitable[nebius.iam.v1.tenant_user_account_service_pb2.ListTenantUserAccountsResponse]]: ...

    @abc.abstractmethod
    def Block(
        self,
        request: nebius.iam.v1.tenant_user_account_service_pb2.BlockTenantUserAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Unblock(
        self,
        request: nebius.iam.v1.tenant_user_account_service_pb2.UnblockTenantUserAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

def add_TenantUserAccountServiceServicer_to_server(servicer: TenantUserAccountServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
