"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import nebius.common.v1.operation_pb2
import nebius.iam.v1.invitation_pb2
import nebius.iam.v1.invitation_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class InvitationServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.CreateInvitationRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Get: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.GetInvitationRequest,
        nebius.iam.v1.invitation_pb2.Invitation,
    ]

    List: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.ListInvitationsRequest,
        nebius.iam.v1.invitation_service_pb2.ListInvitationsResponse,
    ]

    Delete: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.DeleteInvitationRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Update: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.UpdateInvitationRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Resend: grpc.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.ResendInvitationRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

class InvitationServiceAsyncStub:
    Create: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.CreateInvitationRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Get: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.GetInvitationRequest,
        nebius.iam.v1.invitation_pb2.Invitation,
    ]

    List: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.ListInvitationsRequest,
        nebius.iam.v1.invitation_service_pb2.ListInvitationsResponse,
    ]

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.DeleteInvitationRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Update: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.UpdateInvitationRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

    Resend: grpc.aio.UnaryUnaryMultiCallable[
        nebius.iam.v1.invitation_service_pb2.ResendInvitationRequest,
        nebius.common.v1.operation_pb2.Operation,
    ]

class InvitationServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(
        self,
        request: nebius.iam.v1.invitation_service_pb2.CreateInvitationRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Get(
        self,
        request: nebius.iam.v1.invitation_service_pb2.GetInvitationRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.invitation_pb2.Invitation, collections.abc.Awaitable[nebius.iam.v1.invitation_pb2.Invitation]]: ...

    @abc.abstractmethod
    def List(
        self,
        request: nebius.iam.v1.invitation_service_pb2.ListInvitationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.iam.v1.invitation_service_pb2.ListInvitationsResponse, collections.abc.Awaitable[nebius.iam.v1.invitation_service_pb2.ListInvitationsResponse]]: ...

    @abc.abstractmethod
    def Delete(
        self,
        request: nebius.iam.v1.invitation_service_pb2.DeleteInvitationRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Update(
        self,
        request: nebius.iam.v1.invitation_service_pb2.UpdateInvitationRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Resend(
        self,
        request: nebius.iam.v1.invitation_service_pb2.ResendInvitationRequest,
        context: _ServicerContext,
    ) -> typing.Union[nebius.common.v1.operation_pb2.Operation, collections.abc.Awaitable[nebius.common.v1.operation_pb2.Operation]]: ...

def add_InvitationServiceServicer_to_server(servicer: InvitationServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
